name: cicd

on:
  push:
    branches: [ main ]
    tags:     [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        flask-version: ["2.0", "3.0"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up uv (with cache and Python)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
          cache-suffix: py${{ matrix.python-version }}-flask${{ matrix.flask-version }}

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      # Override Flask version using the matrix value
      # This ensures we test against multiple Flask versions
      - name: Install Flask ${{ matrix.flask-version }}
        run: uv pip install "flask~=${{ matrix.flask-version }}" --reinstall

      - name: Lint
        run: make lint

      - name: Test
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  cd:
    needs: ci
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Semantic Release (version, tag, GitHub Release)
        id: release
        uses: python-semantic-release/python-semantic-release@v10.4.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

      - name: Upload dist artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: error

  publish:
    needs: cd
    if: needs.cd.outputs.released == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Trusted Publishing
      contents: read
    env:
      UV_PROJECT_ENVIRONMENT: .venv

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to TestPyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/
          # skip-existing: true   # optional safety for reruns

      - name: Checkout repo (to get tests/)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: "3.9"
          activate-environment: true

      - name: Install package from TestPyPI
        run: |
          VERSION='${{ needs.cd.outputs.version }}'
          uv pip install \
            --extra-index-url https://test.pypi.org/simple \
            --index-url https://pypi.org/simple \
            --index-strategy unsafe-best-match \
            "flask-cognito-lib==${VERSION}"

      # TODO - need a better way to get test dependencies (i.e. from pyproject.toml)
      - name: Install test deps
        run: uv pip install -U "pytest~=8.0" "pytest-mock~=3.0"

      - name: Show installed version
        run: uv run --isolated python -c "import flask_cognito_lib as m; print('Installed', m.__version__)"

      # Verify we can run tests against the installed package (not the local code)
      # We copy tests/ to a temp dir and run from there to avoid any local code interference
      - name: Run tests against installed package (isolated)
        run: |
          tmpdir="$(mktemp -d)"
          cp -r tests "$tmpdir/tests"
          cd "$tmpdir"
          uv run pytest -ra -vv tests

      # Only publish to PyPI on main and for a *final* (non-prerelease) version
      - name: Publish to PyPI (Trusted Publisher)
        if: github.ref == 'refs/heads/main' && !contains(needs.cd.outputs.version, 'rc')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          # skip-existing: true   # optional safety for reruns

