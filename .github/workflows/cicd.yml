name: cicd

on: [push, pull_request]

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        flask-version: ["2.0", "3.0"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}

      - name: Install poetry
        run: pip install poetry==1.5.1

      - name: Install code
        run: poetry install

      - name: Install Flask
        run: poetry run pip install "flask~=${{ matrix.flask-version }}" --force-reinstall

      - name: Lint
        run: make lint

      - name: Test
        run: make test

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos

  cd:
    # Only run this job if the "ci" job passes
    needs: ci

    # Only run this job if new work is pushed to the "main" branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check-out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install poetry
        run: pip install poetry==1.5.1

      - name: Install code
        run: poetry install

      - name: Semantic Release
        id: release
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          poetry run semantic-release publish -D commit_author='github-actions <action@github.com>' 2> out.txt
          grep -q "No release will be made" out.txt && echo "TO_RELEASE=0" >> "$GITHUB_ENV" || echo "TO_RELEASE=1" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish to Test PyPI
        uses: JRubics/poetry-publish@v1.10
        if: ${{ env.TO_RELEASE == '1' }}
        with:
          pypi_token: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_name: "testpypi"
          repository_url: "https://test.pypi.org/legacy/"

      - name: Test install from Test PyPI
        if: ${{ env.TO_RELEASE == '1' }}
        run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          flask-cognito-lib

      - name: Build and publish to PyPI
        if: ${{ env.TO_RELEASE == '1' }}
        uses: JRubics/poetry-publish@v1.10
        with:
          pypi_token: ${{ secrets.PYPI_API_TOKEN }}
