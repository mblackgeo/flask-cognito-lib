name: cicd

on: [push, pull_request]

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        flask-version: ["2.0", "3.0"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up uv (with cache and Python)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
          cache-suffix: py${{ matrix.python-version }}-flask${{ matrix.flask-version }}

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      # Override Flask version using the matrix value
      # This ensures we test against multiple Flask versions
      - name: Install Flask ${{ matrix.flask-version }}
        run: uv pip install "flask~=${{ matrix.flask-version }}" --reinstall

      - name: Lint
        run: make lint

      - name: Test
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  cd:
    # Only run this job if the "ci" job passes
    needs: ci
    runs-on: ubuntu-latest

    # Only run this job if new work is pushed to the "main" branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # allow python-sematic-release to push tag & create release
    permissions:
      contents: write

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Semantic Release (version, tag, GitHub Release)
        id: release
        uses: python-semantic-release/python-semantic-release@v10.4.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

      - name: Upload dist artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: error

  publish:
    needs: cd
    if: needs.cd.outputs.released == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout (full history)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # --- 1) Publish to TestPyPI ---
      - name: Publish to TestPyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/

      # --- 2) Install from TestPyPI and run tests against the built wheel/sdist ---
      - name: Set up uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: "3.11"

      - name: Install package from TestPyPI
        run: |
          uv pip install \
            --index-url https://test.pypi.org/simple \
            --extra-index-url https://pypi.org/simple \
            flask-cognito-lib

      - name: Install test deps
        run: uv pip install -U pytest

      # Run tests from a clean dir so imports use the INSTALLED package, not the repo source
      - name: Run tests against installed package
        run: |
          mkdir -p tests-run && cp -r tests tests-run/ && cd tests-run
          uv run python -c "import flask_cognito_lib, sys; print('Using', flask_cognito_lib.__version__, 'on', sys.version)"
          uv run pytest -ra -vv .

      # --- 3) Publish to PyPI ---
      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
