name: cicd

on: [push, pull_request]

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        flask-version: ["2.0", "3.0"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up uv (with cache and Python)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
          cache-suffix: py${{ matrix.python-version }}-flask${{ matrix.flask-version }}

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      # Override Flask version using the matrix value
      # This ensures we test against multiple Flask versions
      - name: Install Flask ${{ matrix.flask-version }}
        run: uv pip install "flask~=${{ matrix.flask-version }}" --reinstall

      - name: Lint
        run: make lint

      - name: Test
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  cd:
    # Only run this job if the "ci" job passes
    needs: ci

    # Only run this job if new work is pushed to the "main" branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Check-out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install poetry
        run: pip install poetry==1.5.1

      - name: Install code
        run: poetry install

      - name: Semantic Release
        id: release
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          poetry run semantic-release publish -D commit_author='github-actions <action@github.com>' 2> out.txt
          grep -q "No release will be made" out.txt && echo "TO_RELEASE=0" >> "$GITHUB_ENV" || echo "TO_RELEASE=1" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Semantic release output
        if: always()
        run: cat out.txt

      - name: Build and publish to Test PyPI
        uses: JRubics/poetry-publish@v2.0
        if: ${{ env.TO_RELEASE == '1' }}
        with:
          python_version: "3.11"
          poetry_version: "==1.5.1"
          pypi_token: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_name: "testpypi"
          repository_url: "https://test.pypi.org/legacy/"

      - name: Test install from Test PyPI
        if: ${{ env.TO_RELEASE == '1' }}
        run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          flask-cognito-lib

      # TODO run unit tests against Test-PyPI installation

      - name: Build and publish to PyPI
        uses: JRubics/poetry-publish@v2.0
        if: ${{ env.TO_RELEASE == '1' }}
        with:
          python_version: "3.11"
          poetry_version: "==1.5.1"
          pypi_token: ${{ secrets.PYPI_API_TOKEN }}